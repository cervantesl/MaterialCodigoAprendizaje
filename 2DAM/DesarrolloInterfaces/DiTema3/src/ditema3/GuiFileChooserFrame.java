/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ditema3;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Lucas
 */
public class GuiFileChooserFrame extends javax.swing.JFrame {

    JFileChooser selector;
    File f;
    PrintWriter writer;
    GuiFileChooserFrame s;

    public GuiFileChooserFrame() {
        initComponents();

        selector = new JFileChooser();
        selector.setFileFilter(new FiltroTexto());
        selector.setFileSelectionMode(JFileChooser.FILES_ONLY);
        selector.setCurrentDirectory(new File("C:\\Users\\Lucas\\Documents"));

        guardar.setEnabled(false);
        jTextArea1.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        abrir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        guardar = new javax.swing.JButton();
        nuevo = new javax.swing.JButton();
        label1 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Editor Texto - Lucas Cervantes 2DAM");
        setBounds(new java.awt.Rectangle(300, 300, 700, 700));
        setSize(new java.awt.Dimension(700, 700));

        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        nuevo.setText("Nuevo");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nuevo)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(abrir)
                .addGap(46, 46, 46)
                .addComponent(guardar)
                .addGap(94, 94, 94))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(abrir)
                    .addComponent(guardar)
                    .addComponent(nuevo))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed

        if (selector.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            if (jTextArea1.isEnabled() && !jTextArea1.getText().trim().equals("")) {
                avisoAbrir();
            }
            
            f = selector.getSelectedFile();
            leerFichero(f);
            guardar.setEnabled(true);
            jTextArea1.setEnabled(true);
            label1.setText("Nombre fichero: " +f.getName());
        }

    }//GEN-LAST:event_abrirActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed

        if (selector.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            selector.setFileSelectionMode(JFileChooser.FILES_ONLY);
            f = selector.getSelectedFile();
            escribirFichero(f);
            label1.setText("Nombre fichero: " + f.getName());
        }


    }//GEN-LAST:event_guardarActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        jTextArea1.setEnabled(true);
        guardar.setEnabled(true);

        if (!jTextArea1.getText().trim().equals("")) {
            aviso();
        }
        
        label1.setText("Nombre fichero: ");
    }//GEN-LAST:event_nuevoActionPerformed

    private void aviso() {

        int seleccionada = JOptionPane.showConfirmDialog(this, "¿Desea guardar el fichero antes de crear uno nuevo?", "Aviso",
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);

        switch (seleccionada) {
            case JOptionPane.YES_OPTION:
                if (selector.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                    selector.setFileSelectionMode(JFileChooser.FILES_ONLY);
                    f = selector.getSelectedFile();
                    escribirFichero(f);
                    jTextArea1.setText("");
                }                
                break;
            case JOptionPane.NO_OPTION:
                jTextArea1.setText("");
                break;
            case JOptionPane.CANCEL_OPTION:
                break;
            case JOptionPane.CLOSED_OPTION:
                break;
        }

    }
    
    private void avisoAbrir() {

        int seleccionada = JOptionPane.showConfirmDialog(this, "¿Desea guardar el fichero antes de crear uno nuevo?", "Aviso",
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);

        switch (seleccionada) {
            case JOptionPane.YES_OPTION:
                if (selector.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                    selector.setFileSelectionMode(JFileChooser.FILES_ONLY);
                    f = selector.getSelectedFile();
                    escribirFichero(f);
                    jTextArea1.setText("");
                }                
                break;
            case JOptionPane.NO_OPTION:
                jTextArea1.setText("");
                break;
            case JOptionPane.CANCEL_OPTION:
                 if (selector.showOpenDialog(this) == JFileChooser.CANCEL_OPTION) {
                     
                } 
                break;
            case JOptionPane.CLOSED_OPTION:
                break;
        }

    }
    
    

    private void leerFichero(File f) {
        jTextArea1.setText("");
        try {
            BufferedReader reader = new BufferedReader(new FileReader(f));

            String linea = reader.readLine();

            while (linea != null) {
                jTextArea1.append(linea);
                linea = reader.readLine();
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GuiFileChooserFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GuiFileChooserFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void escribirFichero(File f) {
        try {
            writer = new PrintWriter(f);
            writer.print(jTextArea1.getText());
            writer.close();
        } catch (FileNotFoundException ex) {
            ex.getMessage();
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiFileChooserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiFileChooserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiFileChooserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiFileChooserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiFileChooserFrame().setVisible(true);
            }
        });
    }

    public void textoVacio() {
        String data = jTextArea1.getText().trim();

        if (!data.equals("")) {
            guardar.setEnabled(true);

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrir;
    private javax.swing.JButton guardar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.Label label1;
    private javax.swing.JButton nuevo;
    // End of variables declaration//GEN-END:variables
}

class FiltroTexto extends FileFilter {

    @Override
    public boolean accept(File file) {
        String nombre = file.getName();
        return nombre.substring(Math.max(nombre.length() - 4, 0)).equals(".txt");
    }

    @Override
    public String getDescription() {
        return "Ficheros de tipo texto";
    }

}
